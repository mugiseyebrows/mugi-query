// DO NOT EDIT ** This file was generated by mugicpp ** DO NOT EDIT
#include "richheaderdataimpl.h"
#include "richheaderdirection.h"
#include <QPair>
#include <QString>
#include <QWidget>

RichHeaderDataImpl::RichHeaderDataImpl()
    : mMultiline(true), mElide(Qt::ElideNone), mAlign(Qt::AlignCenter), mRotation(0.0),
      mTabDirection(Qt::Horizontal), mStretchFixed(true), mFlatStyle(false) {
}
bool RichHeaderDataImpl::multiline() const {
    return mMultiline;
}
void RichHeaderDataImpl::multiline(bool value) {
    mMultiline = value;
}
Qt::TextElideMode RichHeaderDataImpl::elide() const {
    return mElide;
}
void RichHeaderDataImpl::elide(Qt::TextElideMode value) {
    mElide = value;
}
Qt::Alignment RichHeaderDataImpl::align() const {
    return mAlign;
}
void RichHeaderDataImpl::align(Qt::Alignment value) {
    mAlign = value;
}
double RichHeaderDataImpl::rotation() const {
    return mRotation;
}
void RichHeaderDataImpl::rotation(double value) {
    mRotation = value;
}
Qt::Orientation RichHeaderDataImpl::tabDirection() const {
    return mTabDirection;
}
void RichHeaderDataImpl::tabDirection(Qt::Orientation value) {
    mTabDirection = value;
}
bool RichHeaderDataImpl::stretchFixed() const {
    return mStretchFixed;
}
void RichHeaderDataImpl::stretchFixed(bool value) {
    mStretchFixed = value;
}
QList<int> RichHeaderDataImpl::subsectionSizes() const {
    return mSubsectionSizes;
}
void RichHeaderDataImpl::subsectionSizes(const QList<int>& value) {
    mSubsectionSizes = value;
}
QColor RichHeaderDataImpl::highlightColor() const {
    return mHighlightColor;
}
void RichHeaderDataImpl::highlightColor(const QColor& value) {
    mHighlightColor = value;
}
bool RichHeaderDataImpl::flatStyle() const {
    return mFlatStyle;
}
void RichHeaderDataImpl::flatStyle(bool value) {
    mFlatStyle = value;
}
RichHeaderCell RichHeaderDataImpl::cell(int row, int column) {
    QPair<int, int> index(row, column);
    if (!mCells.contains(index)) {
        mCells[index] = new RichHeaderCellImpl(row, column, 1, 1, QString(), mMultiline, mElide,
                                               mAlign, mRotation, 0);
    }
    return RichHeaderCell(mCells[index]);
}
void RichHeaderDataImpl::clear() {
    RichHeaderCellList widgets = widgetCellsToTheRight(0);
    foreach (RichHeaderCellImpl* cell, widgets) {
        QWidget* widget = cell->widget();
        widget->setParent(0);
        widget->deleteLater();
    }
    qDeleteAll(mCells.values());
    mCells.clear();
}
void RichHeaderDataImpl::pullUp(int sectionCount) {
    pull(RichHeaderDirection::DirectionUp, sectionCount);
}
void RichHeaderDataImpl::pullDown(int sectionCount) {
    pull(RichHeaderDirection::DirectionDown, sectionCount);
}
void RichHeaderDataImpl::pullLeft(int sectionCount) {
    pull(RichHeaderDirection::DirectionLeft, sectionCount);
}
void RichHeaderDataImpl::pullRight(int sectionCount) {
    pull(RichHeaderDirection::DirectionRight, sectionCount);
}
